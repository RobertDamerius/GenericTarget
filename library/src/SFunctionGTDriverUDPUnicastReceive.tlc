%% file : SFunctionGTDriverUDPUnicastReceive.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionGTDriverUDPUnicastReceive
%% 
%% Simulink version      : 23.2 (R2023b) 01-Aug-2023
%% TLC file generated on : 20-May-2024 01:41:35

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionGTDriverUDPUnicastReceive';
     def.OutputFcnSpec = 'void GT_DriverUDPUnicastReceiveStep(uint16 p1, uint32 p3, uint32 p5, uint16 y1[5*p5], uint8 y2[p3*p5], uint32 y3[p5], double y4[p5], uint32 y5[1], uint32 y6[1], int32 y7[1])';
     def.StartFcnSpec = 'void GT_DriverUDPUnicastReceiveInitialize(uint16 p1, uint8 p2[4], uint32 p3, int32 p4, uint32 p5, uint32 p6, uint8 p7[4], uint8 p8, uint8 p9, uint8 p10[], uint32 p11, uint8 p12)';
     def.TerminateFcnSpec = 'void GT_DriverUDPUnicastReceiveTerminate()';
     def.HeaderFiles = {'GT_DriverUDPUnicastReceive.hpp'};
     def.SourceFiles = {'GT_DriverUDPUnicastReceive.cpp', 'GT_SimulinkSupport.cpp'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     def.Options.supportsMultipleExecInstances = true;
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionGTDriverUDPUnicastReceive "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPUnicastReceive_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPUnicastReceive_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "GT_DriverUDPUnicastReceive.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("GT_DriverUDPUnicastReceive.hpp")>
    %endif
    %<SLibAddToStaticSources("GT_DriverUDPUnicastReceive.cpp")>
    %<SLibAddToStaticSources("GT_SimulinkSupport.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign int32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT32)
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign uint16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT16)
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPUnicastReceive_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void SFunctionGTDriverUDPUnicastReceive_wrapper_Start_%<sfunInstanceName>(const %<uint16Type> p1, const %<uint8Type>* p2, const %<uint32Type> p3, const %<int32Type> p4, const %<uint32Type> p5, const %<uint32Type> p6, const %<uint8Type>* p7, const %<uint8Type> p8, const %<uint8Type> p9, const %<uint8Type>* p10, const %<uint32Type> p11, const %<uint8Type> p12);
        extern void SFunctionGTDriverUDPUnicastReceive_wrapper_Output_%<sfunInstanceName>(const %<uint16Type> p1, const %<uint32Type> p3, const %<uint32Type> p5,  %<uint16Type>* y1,  %<uint8Type>* y2,  %<uint32Type>* y3,  %<doubleType>* y4,  %<uint32Type>* y5,  %<uint32Type>* y6,  %<int32Type>* y7);
        extern void SFunctionGTDriverUDPUnicastReceive_wrapper_Terminate_%<sfunInstanceName>(void);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPUnicastReceive_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "GT_DriverUDPUnicastReceive.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPUnicastReceive_wrapper_Start_%<sfunInstanceName>(const %<uint16Type> p1, const %<uint8Type>* p2, const %<uint32Type> p3, const %<int32Type> p4, const %<uint32Type> p5, const %<uint32Type> p6, const %<uint8Type>* p7, const %<uint8Type> p8, const %<uint8Type> p9, const %<uint8Type>* p10, const %<uint32Type> p11, const %<uint8Type> p12) {
            GT_DriverUDPUnicastReceiveInitialize((%<uint16Type>)(p1), (%<uint8Type>*)(p2), (%<uint32Type>)(p3), (%<int32Type>)(p4), (%<uint32Type>)(p5), (%<uint32Type>)(p6), (%<uint8Type>*)(p7), (%<uint8Type>)(p8), (%<uint8Type>)(p9), (%<uint8Type>*)(p10), (%<uint32Type>)(p11), (%<uint8Type>)(p12));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPUnicastReceive_wrapper_Output_%<sfunInstanceName>(const %<uint16Type> p1, const %<uint32Type> p3, const %<uint32Type> p5,  %<uint16Type>* y1,  %<uint8Type>* y2,  %<uint32Type>* y3,  %<doubleType>* y4,  %<uint32Type>* y5,  %<uint32Type>* y6,  %<int32Type>* y7) {
            GT_DriverUDPUnicastReceiveStep((%<uint16Type>)(p1), (%<uint32Type>)(p3), (%<uint32Type>)(p5), y1, y2, y3, y4, y5, y6, y7);
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPUnicastReceive_wrapper_Terminate_%<sfunInstanceName>(void) {
            GT_DriverUDPUnicastReceiveTerminate();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_ptr = LibBlockParameterBaseAddr(p7)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign p10_ptr = LibBlockParameterBaseAddr(p10)
        %assign p11_val = LibBlockParameter(p11, "", "", 0)
        %assign p12_val = LibBlockParameter(p12, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionGTDriverUDPUnicastReceive_wrapper_Start_%<sfunInstanceName>(%<p1_val>, %<p2_ptr>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_ptr>, %<p8_val>, %<p9_val>, %<p10_ptr>, %<p11_val>, %<p12_val>);
        
        }
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_ptr = LibBlockParameterBaseAddr(p7)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %assign p10_ptr = LibBlockParameterBaseAddr(p10)
        %assign p11_val = LibBlockParameter(p11, "", "", 0)
        %assign p12_val = LibBlockParameter(p12, "", "", 0)
        %% 
        GT_DriverUDPUnicastReceiveInitialize(%<p1_val>, (%<uint8Type>*)%<p2_ptr>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, (%<uint8Type>*)%<p7_ptr>, %<p8_val>, %<p9_val>, (%<uint8Type>*)%<p10_ptr>, %<p11_val>, %<p12_val>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionGTDriverUDPUnicastReceive_wrapper_Output_%<sfunInstanceName>(%<p1_val>, %<p3_val>, %<p5_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>);
        
        }
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %% 
        GT_DriverUDPUnicastReceiveStep(%<p1_val>, %<p3_val>, %<p5_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionGTDriverUDPUnicastReceive_wrapper_Terminate_%<sfunInstanceName>();
        
        }
    %else
        %% 
        GT_DriverUDPUnicastReceiveTerminate();
    %endif
%endfunction

%% [EOF]
