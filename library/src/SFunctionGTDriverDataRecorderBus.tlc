%% file : SFunctionGTDriverDataRecorderBus.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionGTDriverDataRecorderBus
%% 
%% Simulink version      : 24.1 (R2024a) 19-Nov-2023
%% TLC file generated on : 07-Nov-2024 20:32:00

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionGTDriverDataRecorderBus';
     def.OutputFcnSpec = 'void GT_DriverDataRecorderBusStep(uint8 p1[], uint32 p2, double u1, uint8 u2[p4], uint32 p4)';
     def.StartFcnSpec = 'void GT_DriverDataRecorderBusInitialize(uint8 p1[], uint32 p2, uint32 p3, uint32 p4, uint8 p5[], uint32 p6, uint8 p7[], uint32 p8, uint8 p9[], uint32 p10)';
     def.TerminateFcnSpec = 'void GT_DriverDataRecorderBusTerminate()';
     def.HeaderFiles = {'GT_DriverDataRecorderBus.hpp'};
     def.SourceFiles = {'GT_DriverDataRecorderBus.cpp', 'GT_SimulinkSupport.cpp'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     def.Options.supportsMultipleExecInstances = true;
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionGTDriverDataRecorderBus "C"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionGTDriverDataRecorderBus_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionGTDriverDataRecorderBus_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "GT_DriverDataRecorderBus.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("GT_DriverDataRecorderBus.hpp")>
    %endif
    %<SLibAddToStaticSources("GT_DriverDataRecorderBus.cpp")>
    %<SLibAddToStaticSources("GT_SimulinkSupport.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionGTDriverDataRecorderBus_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void SFunctionGTDriverDataRecorderBus_wrapper_Start_%<sfunInstanceName>(const %<uint8Type>* p1, const %<uint32Type> p2, const %<uint32Type> p3, const %<uint32Type> p4, const %<uint8Type>* p5, const %<uint32Type> p6, const %<uint8Type>* p7, const %<uint32Type> p8, const %<uint8Type>* p9, const %<uint32Type> p10);
        extern void SFunctionGTDriverDataRecorderBus_wrapper_Output_%<sfunInstanceName>(const %<uint8Type>* p1, const %<uint32Type> p2, const %<doubleType> u1, const %<uint8Type>* u2, const %<uint32Type> p4);
        extern void SFunctionGTDriverDataRecorderBus_wrapper_Terminate_%<sfunInstanceName>(void);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionGTDriverDataRecorderBus_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "GT_DriverDataRecorderBus.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverDataRecorderBus_wrapper_Start_%<sfunInstanceName>(const %<uint8Type>* p1, const %<uint32Type> p2, const %<uint32Type> p3, const %<uint32Type> p4, const %<uint8Type>* p5, const %<uint32Type> p6, const %<uint8Type>* p7, const %<uint32Type> p8, const %<uint8Type>* p9, const %<uint32Type> p10) {
            GT_DriverDataRecorderBusInitialize((%<uint8Type>*)(p1), (%<uint32Type>)(p2), (%<uint32Type>)(p3), (%<uint32Type>)(p4), (%<uint8Type>*)(p5), (%<uint32Type>)(p6), (%<uint8Type>*)(p7), (%<uint32Type>)(p8), (%<uint8Type>*)(p9), (%<uint32Type>)(p10));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverDataRecorderBus_wrapper_Output_%<sfunInstanceName>(const %<uint8Type>* p1, const %<uint32Type> p2, const %<doubleType> u1, const %<uint8Type>* u2, const %<uint32Type> p4) {
            GT_DriverDataRecorderBusStep((%<uint8Type>*)(p1), (%<uint32Type>)(p2), (%<doubleType>)(u1), (%<uint8Type>*)(u2), (%<uint32Type>)(p4));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverDataRecorderBus_wrapper_Terminate_%<sfunInstanceName>(void) {
            GT_DriverDataRecorderBusTerminate();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_ptr = LibBlockParameterBaseAddr(p1)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_ptr = LibBlockParameterBaseAddr(p5)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_ptr = LibBlockParameterBaseAddr(p7)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_ptr = LibBlockParameterBaseAddr(p9)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            SFunctionGTDriverDataRecorderBus_wrapper_Start_%<sfunInstanceName>(%<p1_ptr>, %<p2_val>, %<p3_val>, %<p4_val>, %<p5_ptr>, %<p6_val>, %<p7_ptr>, %<p8_val>, %<p9_ptr>, %<p10_val>);
        
        }
    %else
        %assign p1_ptr = LibBlockParameterBaseAddr(p1)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_ptr = LibBlockParameterBaseAddr(p5)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_ptr = LibBlockParameterBaseAddr(p7)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_ptr = LibBlockParameterBaseAddr(p9)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %% 
        GT_DriverDataRecorderBusInitialize((%<uint8Type>*)%<p1_ptr>, %<p2_val>, %<p3_val>, %<p4_val>, (%<uint8Type>*)%<p5_ptr>, %<p6_val>, (%<uint8Type>*)%<p7_ptr>, %<p8_val>, (%<uint8Type>*)%<p9_ptr>, %<p10_val>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_ptr = LibBlockParameterBaseAddr(p1)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            SFunctionGTDriverDataRecorderBus_wrapper_Output_%<sfunInstanceName>(%<p1_ptr>, %<p2_val>, %<u1_val>, %<u2_ptr>, %<p4_val>);
        
        }
    %else
        %assign p1_ptr = LibBlockParameterBaseAddr(p1)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %% 
        GT_DriverDataRecorderBusStep((%<uint8Type>*)%<p1_ptr>, %<p2_val>, %<u1_val>, (%<uint8Type>*)%<u2_ptr>, %<p4_val>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            SFunctionGTDriverDataRecorderBus_wrapper_Terminate_%<sfunInstanceName>();
        
        }
    %else
        %% 
        GT_DriverDataRecorderBusTerminate();
    %endif
%endfunction

%% [EOF]
