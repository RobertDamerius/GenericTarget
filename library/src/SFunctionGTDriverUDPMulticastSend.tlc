%% file : SFunctionGTDriverUDPMulticastSend.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionGTDriverUDPMulticastSend
%% 
%% Simulink version      : 23.2 (R2023b) 01-Aug-2023
%% TLC file generated on : 27-May-2024 10:58:35

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionGTDriverUDPMulticastSend';
     def.OutputFcnSpec = 'void GT_DriverUDPMulticastSendStep(int32 y1[1], int32 y2[1], uint16 p1, uint16 u1[5], uint8 u2[], uint32 u3)';
     def.StartFcnSpec = 'void GT_DriverUDPMulticastSendInitialize(uint16 p1, uint8 p2[4], uint8 p3[4], uint8 p4[], uint32 p5, int32 p6, uint8 p7, uint8 p8)';
     def.TerminateFcnSpec = 'void GT_DriverUDPMulticastSendTerminate()';
     def.HeaderFiles = {'GT_DriverUDPMulticastSend.hpp'};
     def.SourceFiles = {'GT_DriverUDPMulticastSend.cpp', 'GT_SimulinkSupport.cpp'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     def.Options.supportsMultipleExecInstances = true;
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionGTDriverUDPMulticastSend "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPMulticastSend_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPMulticastSend_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "GT_DriverUDPMulticastSend.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("GT_DriverUDPMulticastSend.hpp")>
    %endif
    %<SLibAddToStaticSources("GT_DriverUDPMulticastSend.cpp")>
    %<SLibAddToStaticSources("GT_SimulinkSupport.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign int32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT32)
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign uint16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT16)
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPMulticastSend_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void SFunctionGTDriverUDPMulticastSend_wrapper_Start_%<sfunInstanceName>(const %<uint16Type> p1, const %<uint8Type>* p2, const %<uint8Type>* p3, const %<uint8Type>* p4, const %<uint32Type> p5, const %<int32Type> p6, const %<uint8Type> p7, const %<uint8Type> p8);
        extern void SFunctionGTDriverUDPMulticastSend_wrapper_Output_%<sfunInstanceName>( %<int32Type>* y1,  %<int32Type>* y2, const %<uint16Type> p1, const %<uint16Type>* u1, const %<uint8Type>* u2, const %<uint32Type> u3);
        extern void SFunctionGTDriverUDPMulticastSend_wrapper_Terminate_%<sfunInstanceName>(void);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPMulticastSend_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "GT_DriverUDPMulticastSend.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPMulticastSend_wrapper_Start_%<sfunInstanceName>(const %<uint16Type> p1, const %<uint8Type>* p2, const %<uint8Type>* p3, const %<uint8Type>* p4, const %<uint32Type> p5, const %<int32Type> p6, const %<uint8Type> p7, const %<uint8Type> p8) {
            GT_DriverUDPMulticastSendInitialize((%<uint16Type>)(p1), (%<uint8Type>*)(p2), (%<uint8Type>*)(p3), (%<uint8Type>*)(p4), (%<uint32Type>)(p5), (%<int32Type>)(p6), (%<uint8Type>)(p7), (%<uint8Type>)(p8));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPMulticastSend_wrapper_Output_%<sfunInstanceName>( %<int32Type>* y1,  %<int32Type>* y2, const %<uint16Type> p1, const %<uint16Type>* u1, const %<uint8Type>* u2, const %<uint32Type> u3) {
            GT_DriverUDPMulticastSendStep(y1, y2, (%<uint16Type>)(p1), (%<uint16Type>*)(u1), (%<uint8Type>*)(u2), (%<uint32Type>)(u3));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPMulticastSend_wrapper_Terminate_%<sfunInstanceName>(void) {
            GT_DriverUDPMulticastSendTerminate();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_ptr = LibBlockParameterBaseAddr(p3)
        %assign p4_ptr = LibBlockParameterBaseAddr(p4)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionGTDriverUDPMulticastSend_wrapper_Start_%<sfunInstanceName>(%<p1_val>, %<p2_ptr>, %<p3_ptr>, %<p4_ptr>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>);
        
        }
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_ptr = LibBlockParameterBaseAddr(p3)
        %assign p4_ptr = LibBlockParameterBaseAddr(p4)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %% 
        GT_DriverUDPMulticastSendInitialize(%<p1_val>, (%<uint8Type>*)%<p2_ptr>, (%<uint8Type>*)%<p3_ptr>, (%<uint8Type>*)%<p4_ptr>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign uint16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT16)
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionGTDriverUDPMulticastSend_wrapper_Output_%<sfunInstanceName>(%<y1_ptr>, %<y2_ptr>, %<p1_val>, %<u1_ptr>, %<u2_ptr>, %<u3_val>);
        
        }
    %else
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign u3_val = LibBlockInputSignal(2, "", "", 0)
        %% 
        GT_DriverUDPMulticastSendStep(%<y1_ptr>, %<y2_ptr>, %<p1_val>, (%<uint16Type>*)%<u1_ptr>, (%<uint8Type>*)%<u2_ptr>, %<u3_val>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionGTDriverUDPMulticastSend_wrapper_Terminate_%<sfunInstanceName>();
        
        }
    %else
        %% 
        GT_DriverUDPMulticastSendTerminate();
    %endif
%endfunction

%% [EOF]
