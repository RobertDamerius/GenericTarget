%% file : SFunctionGTDriverUDPSocket.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionGTDriverUDPSocket
%% 
%% Simulink version      : 24.1 (R2024a) 19-Nov-2023
%% TLC file generated on : 16-Nov-2024 18:15:56

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionGTDriverUDPSocket';
     def.OutputFcnSpec = 'void GT_DriverUDPSocketStep(int32 p1, uint8 p10, int32 p11, uint8 y1[p11], uint32 y2[1], uint8 y3[4], uint16 y4[1], int32 y5[1], int32 y6[1], uint8 u1[4], uint16 u2, uint8 u3[], uint32 u4, uint8 u5[], uint32 u6)';
     def.StartFcnSpec = 'void GT_DriverUDPSocketInitialize(int32 p1, uint8 p2[], uint32 p3, int32 p4, uint8 p5, uint8 p6, uint8 p7, uint8 p8, uint8 p9)';
     def.TerminateFcnSpec = 'void GT_DriverUDPSocketTerminate(int32 p1)';
     def.HeaderFiles = {'GT_DriverUDPSocket.hpp'};
     def.SourceFiles = {'GT_DriverUDPSocket.cpp', 'GT_SimulinkSupport.cpp'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     def.Options.supportsMultipleExecInstances = true;
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionGTDriverUDPSocket "C"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPSocket_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPSocket_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "GT_DriverUDPSocket.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("GT_DriverUDPSocket.hpp")>
    %endif
    %<SLibAddToStaticSources("GT_DriverUDPSocket.cpp")>
    %<SLibAddToStaticSources("GT_SimulinkSupport.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign int32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT32)
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign uint16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT16)
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPSocket_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void SFunctionGTDriverUDPSocket_wrapper_Start_%<sfunInstanceName>(const %<int32Type> p1, const %<uint8Type>* p2, const %<uint32Type> p3, const %<int32Type> p4, const %<uint8Type> p5, const %<uint8Type> p6, const %<uint8Type> p7, const %<uint8Type> p8, const %<uint8Type> p9);
        extern void SFunctionGTDriverUDPSocket_wrapper_Output_%<sfunInstanceName>(const %<int32Type> p1, const %<uint8Type> p10, const %<int32Type> p11,  %<uint8Type>* y1,  %<uint32Type>* y2,  %<uint8Type>* y3,  %<uint16Type>* y4,  %<int32Type>* y5,  %<int32Type>* y6, const %<uint8Type>* u1, const %<uint16Type> u2, const %<uint8Type>* u3, const %<uint32Type> u4, const %<uint8Type>* u5, const %<uint32Type> u6);
        extern void SFunctionGTDriverUDPSocket_wrapper_Terminate_%<sfunInstanceName>(const %<int32Type> p1);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionGTDriverUDPSocket_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "GT_DriverUDPSocket.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPSocket_wrapper_Start_%<sfunInstanceName>(const %<int32Type> p1, const %<uint8Type>* p2, const %<uint32Type> p3, const %<int32Type> p4, const %<uint8Type> p5, const %<uint8Type> p6, const %<uint8Type> p7, const %<uint8Type> p8, const %<uint8Type> p9) {
            GT_DriverUDPSocketInitialize((%<int32Type>)(p1), (%<uint8Type>*)(p2), (%<uint32Type>)(p3), (%<int32Type>)(p4), (%<uint8Type>)(p5), (%<uint8Type>)(p6), (%<uint8Type>)(p7), (%<uint8Type>)(p8), (%<uint8Type>)(p9));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPSocket_wrapper_Output_%<sfunInstanceName>(const %<int32Type> p1, const %<uint8Type> p10, const %<int32Type> p11,  %<uint8Type>* y1,  %<uint32Type>* y2,  %<uint8Type>* y3,  %<uint16Type>* y4,  %<int32Type>* y5,  %<int32Type>* y6, const %<uint8Type>* u1, const %<uint16Type> u2, const %<uint8Type>* u3, const %<uint32Type> u4, const %<uint8Type>* u5, const %<uint32Type> u6) {
            GT_DriverUDPSocketStep((%<int32Type>)(p1), (%<uint8Type>)(p10), (%<int32Type>)(p11), y1, y2, y3, y4, y5, y6, (%<uint8Type>*)(u1), (%<uint16Type>)(u2), (%<uint8Type>*)(u3), (%<uint32Type>)(u4), (%<uint8Type>*)(u5), (%<uint32Type>)(u6));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionGTDriverUDPSocket_wrapper_Terminate_%<sfunInstanceName>(const %<int32Type> p1) {
            GT_DriverUDPSocketTerminate((%<int32Type>)(p1));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            SFunctionGTDriverUDPSocket_wrapper_Start_%<sfunInstanceName>(%<p1_val>, %<p2_ptr>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>);
        
        }
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %assign p8_val = LibBlockParameter(p8, "", "", 0)
        %assign p9_val = LibBlockParameter(p9, "", "", 0)
        %% 
        GT_DriverUDPSocketInitialize(%<p1_val>, (%<uint8Type>*)%<p2_ptr>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>, %<p8_val>, %<p9_val>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %assign p11_val = LibBlockParameter(p11, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_ptr = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_ptr = LibBlockInputSignalAddr(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            SFunctionGTDriverUDPSocket_wrapper_Output_%<sfunInstanceName>(%<p1_val>, %<p10_val>, %<p11_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<u1_ptr>, %<u2_val>, %<u3_ptr>, %<u4_val>, %<u5_ptr>, %<u6_val>);
        
        }
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p10_val = LibBlockParameter(p10, "", "", 0)
        %assign p11_val = LibBlockParameter(p11, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_val = LibBlockInputSignal(1, "", "", 0)
        %assign u3_ptr = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u4_val = LibBlockInputSignal(3, "", "", 0)
        %assign u5_ptr = LibBlockInputSignalAddr(4, "", "", 0)
        %assign u6_val = LibBlockInputSignal(5, "", "", 0)
        %% 
        GT_DriverUDPSocketStep(%<p1_val>, %<p10_val>, %<p11_val>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, (%<uint8Type>*)%<u1_ptr>, %<u2_val>, (%<uint8Type>*)%<u3_ptr>, %<u4_val>, (%<uint8Type>*)%<u5_ptr>, %<u6_val>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            SFunctionGTDriverUDPSocket_wrapper_Terminate_%<sfunInstanceName>(%<p1_val>);
        
        }
    %else
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %% 
        GT_DriverUDPSocketTerminate(%<p1_val>);
    %endif
%endfunction

%% [EOF]
