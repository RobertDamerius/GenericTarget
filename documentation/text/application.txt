<h1>Generic Target Application Overview</h1>
    The generic target application is an executable file.
    Under linux this file has no extension, under Windows the extension is <code>.exe</code>.
    The name of the executable can be set with the property <a href="packages_gt_generictarget.html#targetProductName">targetProductName</a>.
    The directory to which the application is deployed on the target is set via the property <a href="packages_gt_generictarget.html#targetSoftwareDirectory">targetSoftwareDirectory</a>.
    By default the absolute path to the application is <code>~/GenericTarget/GenericTarget</code>.

    <a name="directory"></a>
    <h3>Application Directory</h3>
    The directory in which the application is located has the following structure.
    <br>
    <br>
    <ul class="dir">
        <li>.vscode</li>
        <li>build</li>
        <li>code</li>
        <li>data</li>
        <li>protocol</li>
    </ul>
    <ul class="file">
        <li>GenericTarget</li>
        <li>Makefile</li>
        <li>README.md</li>
    </ul>
    <br>
    <table>
        <tr><th width="200px">Directory/File</th><th>Description</th></tr>
        <tr><td>.vscode</td><td>This directory contains metadata for VSCode and allows for <a href="example_debugging.html">debugging</a> the application with VSCode, just in case.</td></tr>
        <tr><td>build</td><td>This directory is created during the compilation process. During compilation, object files and dependency files are first created from the source file, which are then linked together to the application. The dependency files ensure that when a source or header file is changed, only those source files are recompiled that depend on the changed files.</td></tr>
        <tr><td>code</td><td>This directory contains the source code of the application including the Generic Target Core, the generated code from Simulink as well as optional custom code.</td></tr>
        <tr><td>data</td><td>This directory is created by the application to store <a href="datarecording.html">data recording files</a>, if data recording is to be used, i.e. if there're Write To File blocks in the model.</td></tr>
        <tr><td>protocol</td><td>This directory is created by the application to store <a href="protocolfile.html">protocol files</a>.</td></tr>
        <tr><td>GenericTarget</td><td>This is the executable. The name can be changed via the property <a href="packages_gt_generictarget.html#targetProductName">targetProductName</a>.</tr>
        <tr><td>Makefile</td><td>On the target computer the software is compiled with the g++ compiler. For this purpose the make tool is used, which uses the Makefile to execute appropriate commands. The Makefile compiles all source files in the <code>code/</code> directory.</td></tr>
        <tr><td>README.md</td><td>A readme file providing additional information.</td></tr>
    </table>
    <br>

    <a name="arguments"></a>
    <h3>Application Arguments</h3>
    The following arguments can be passed to the application.
    <br><br>
    <table>
        <tr><th>Argument</th><th>Description</th></tr>
        <tr><td style="font-family: Courier New;">--console</td><td>Print stdout/stderr to the console instead of redirecting them to a protocol file.</td></tr>
        <tr><td style="font-family: Courier New;">--help</td><td>Show the help page for all commands.</td></tr>
        <tr><td style="font-family: Courier New;">--stop</td><td>Stop another possibly running target application and also stop this application.</td></tr>
    </table>
    <br>

    <a name="flowchart"></a>
    <h3>Application Flowchart</h3>
    The basic flowchart of the target application is illustrated below.
    After an <a href="#initialize">initialization phase</a> the <a href="#mainloop">main-loop</a> is executed.
    Before the application is terminated, the <a href="#terminate">termination function</a> is called.
    All three steps are described in detail below.
    <br>
    <br>
    <center><object data="../img/ApplicationOverview.svg" type="image/svg+xml"></object></center>
    <br>
    <br>

<a name="initialize"></a>
<h2>Initialization</h2>
    After the application is started, the initialization phase is passed through.
    The individual steps are explained below.
    <br>
    <br>
    <center><object data="../img/ApplicationInitialize.svg" type="image/svg+xml"></object></center><br><br>
    <br>
    <br>

    <h3>1. Print Application Information</h3>
    At this point basic information about the application is displayed.
    All output is redirected to a protocol text file by default.
    With the <a href="packages_gt_generictarget.html#ShowLatestProtocol">ShowLatestProtocol</a> member function the latest protocol file from the target computer is displayed.

    <h3>2. Parse Arguments (arg)</h3>
    At this point the <a href="#arguments">arguments</a>, which were passed to the application, are evaluated.
    If the argument <code>--stop</code> is in the list of passed arguments, the termination flag is set.

    <h3>3. Open AppSocket (UDP Socket)</h3>
    The generic target application internally uses an own UDP socket.
    This UDP socket is called AppSocket.
    The port of the AppSocket cannot be used for communication via UDP within the Simulink model.
    The port value is set via the property <a href="packages_gt_generictarget.html#portAppSocket">portAppSocket</a>.

    <h3>4. Bind Port for AppSocket</h3>
    At this point the port for the application socket is bound.
    If this operation is unsuccessful, the port is already being used by another application (e.g. an already running generic target application).

    <h3>5. If (arg == "--stop")</h3>
    If the termination flag is not set, the application is terminated.
    This ensures that a generic target application is not executed multiple times at the same time.
    If the termination flag is set, a termination message is sent to the AppSocket port.
    An already running generic target application receives this termination message and terminates itself.

    <h3>6. Send UDP Termination Message</h3>
    At this point a UDP termination message is sent. The destination is the localhost, i.e. <code>127.0.0.1</code>.
    The message consists of 4 bytes and is defined to be <code>[0x47 0x54 0xDE 0xAD]</code>.

    <h3>7. If (arg == "--stop")</h3>
    If the termination flag is set, the application is terminated.

    <h3>8. SimulinkInterface::Initialize()</h3>
    This is where the Simulink model is initialized.
    All initialization callbacks of the model are called at this point.
    If an error occurs during initialization, the application logs this in the <a href="protocolfile.html">protocol file</a> and the application is to be terminated.

    <h3>9. DataRecorderManager::Create()</h3>
    The DataRecorderManager creates a new directory in which the recorded data is stored.
    The name of the created folder corresponds to the UTC time of the target computer.
    If the DataRecorderManager could not create a new folder, the application is closed.
    If there is no data recorder block in the model, then no data directory will be created.

<a name="mainloop"></a>
<h2>Main Loop</h2>
    After the initialization phase, the main loop is executed until a termination message is received.
    The main loop is executed in the main thread and only waits for a termination message to interrupt the loop.
    In addition, the main loop is interrupted if the operating system sends a signal, such as <code>SIGINT</code> or <code>SIGTERM</code> to the application.
    <br>
    <br>
    <center><object data="../img/ApplicationMainLoop.svg" type="image/svg+xml"></object></center><br><br>
    <br>
    <br>
    <h3>1. Start Scheduler</h3>
    At this point the actual <a href="timingscheduling.html">scheduler</a> is started.
    The scheduler runs in its own thread and ensures that all <code>step()</code> methods of the Simulink model are called with the appropriate sampletime.

    <h3>2. Receive UDP via AppSocket</h3>
    The main loop waits for UDP messages.
    If the application socket was closed, for example because the application was terminated from outside (<code>Ctrl + C</code> or <code>kill</code>), the main loop is interrupted.

    <h3>3. Sender is Localhost</h3>
    At this point it is checked if the sender of a UDP message is the localhost.
    The IP address of the localhost is <code>127.0.0.1</code>.
    If the UDP message comes from a different address, this message is ignored.
    
    <div class="note-green">
    <h3 class="note-green">Note</h3>
    The termination message can also be sent from another application on the target PC.
    It is also possible to use a UDP Send block in the Simulink model that sends a termination message to the application socket.
    In this way, the generic target application can be terminated by the model software.
    </div>

    <h3>4. Message is Termination Message</h3>
    If the received message is a termination message, the main loop is interrupted.
    Otherwise, the system further waits for a UDP message or a signal from the operating system.
    A termination message consists of four bytes:
    <code>[0x47 0x54 0xDE 0xAD]</code>
    <br>
    <i>The first two bytes correspond to the ASCII characters 'G' and 'T' (for Generic Target) and the last two bytes give hexadecimal read DEAD.</i>

<a name="terminate"></a>
<h2>Termination</h2>
    During termination all open files are closed.
    At the same time, allocated memory is freed again.
    <br>
    <br>
    <center><object data="../img/ApplicationTerminate.svg" type="image/svg+xml"></object></center><br><br>
    <br>
    <br>
    <h3>1. Stop Scheduler</h3>
    The scheduler that was started during the main loop is stopped.
    All currently running <code>step()</code> functions of the Simulink model are still completely executed.
    However, no new <code>step()</code> function calls are started.

    <h3>2. SimulinkInterface::Terminate()</h3>
    At this point the terminattion function of the Simulink model is called.
    All termination callback functions of driver blocks are also called.

    <h3>3. DataRecorderManager::Destroy()</h3>
    Created data recording objects are destroyed at this point. Values that are still unwritten are written to the data files.

    <h3>4. Close AppSocket</h3>
    The application socket is closed and the generic target application is terminated.

