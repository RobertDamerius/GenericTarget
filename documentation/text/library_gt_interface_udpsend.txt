<h1>UDP Send</h1>
<h3>Library</h3>
<span style="font-family: Courier New">GenericTarget / Interface / UDP Send</span>

<h3>Description</h3>
Send a UDP message to a specified destination. The communication is handled via a global internal socket that must be bound to a unique port.
All UDP blocks access that internal socket via the port, which is specified under the socket tab.
During simulation via Simulink the port should be globally unique among all UDP blocks, because there's no global internal socket but a
local one for each block.


<h2>Input Ports</h2>
<h3>destinationAddress</h3>
A 4-dimensional vector indicating the destination IPv4 address.
<br>
<b>Data Type:</b> <span style="font-family: Courier New">uint8</span>

<h3>destinationPort</h3>
The destination port.
<br>
<b>Data Type:</b> <span style="font-family: Courier New">uint16</span>

<h3>bytes</h3>
A vector containing the message that should be sent.
<br>
<b>Data Type:</b> <span style="font-family: Courier New">uint8</span>

<h3>length</h3>
The number of bytes that should be sent. The length must not be greater than 65507. If the length is zero, then no UDP message is sent.
<br>
<b>Data Type:</b> <span style="font-family: Courier New">uint32</span>

<h2>Output Ports</h2>
<h3>details</h3>
This output port is enabled, when checking the option <b>Show details output port</b> via the block mask.
<br>
<b>Data Type:</b> <span style="font-family: Courier New">Bus</span>
<br><br>
The bus contains the following values.
<br>
<table>
    <tr><th>Parameter Name</th><th>Data Type</th><th>Description</th></tr>
    <tr><td style="font-family: Courier New;">result</td><td style="font-family: Courier New;">int32</td><td>The value represents the number of bytes that have been sent or a negative value in case of errors.</td></tr>
    <tr><td style="font-family: Courier New;">lastErrorCode</td><td style="font-family: Courier New;">int32</td><td>The value indicates the last socket error code from sending a message. 0 means no error. The actual meaning of non-zero values depend on the operating system.</td></tr>
</table>


<h2>Block Parameters</h2>
The following table shows all block parameters.
<table>
    <tr><th>Parameter Name</th><th>Description</th></tr>
    <tr><td style="font-family: Courier New;">showDetails</td><td>Checkbox for showing the details output port.</td></tr>
    <tr><td style="font-family: Courier New;">interfacePort</td><td>Local port under the "Socket" tab.</td></tr>
    <tr><td style="font-family: Courier New;">interfaceIP</td><td>Interface under the "Socket" tab.</td></tr>
    <tr><td style="font-family: Courier New;">deviceName</td><td>Device name under the "Socket" tab.</td></tr>
    <tr><td style="font-family: Courier New;">prioritySocket</td><td>Socket priority under the "Advanced" tab</td></tr>
    <tr><td style="font-family: Courier New;">allowBroadcast</td><td>Allow broadcast checkbox under the "Advanced" tab</td></tr>
    <tr><td style="font-family: Courier New;">SampleTime</td><td>Sampletime.</td></tr>
</table>

<h3>Socket</h3>
A socket represents the programming interface from the application to the network hardware.
During the initialization phase of the model, all UDP blocks register with the generic target core, which manages all sockets in a hash table.
A socket is uniquely identified by its local port.
This port serves as the key value for the internal hash table.
If several UDP blocks register with the same port, then these blocks are linked to the same socket.
All UDP blocks that use the same local port thus always access the same socket.
All other settings that can be made in a block mask always refer to the socket that belongs to the specified port.
If, for example, two different interface addresses are specified for the same socket, then the generic target core reports an error and the software terminates.

<div class="note-green">
<h3 class="note-green">Note</h3>
Only one UDP receive block should be used for a socket.
At the same time several UDP Send blocks can be used for the same socket.
While the UDP receive block outputs all received messages from the buffer in the executed sample step, a message is sent immediately when the UDP send block is executed.
If multiple receivers are registered for the same port, then the generic target core reports an error and the software terminates.
</div>

<h3>Port Range</h3>
The port range [0,1023] is reserved for system ports and should not be used.
The range [1024,49151] is defined for user ports.
The remaining range [49152,65536] is reserved for dynamic ports.
However, not all operating systems follow this standardization.
Under certain circumstances, ports in the dynamic ports range may not be able to be used explicitly because the operating system prevents this.
If a port cannot be bound, then this port is either in use by another program or the operating system prevents its use.

<div class="note-orange">
<h3 class="note-orange">Application Port</h3>
Keep in mind that the target application uses its own port (<a href="packages_gt_generictarget.html#portAppSocket">portAppSocket</a>) to prevent the target from being started multiple times.
This port is set via the <a href="packages_gt_generictarget.html">GT.GenericTarget</a> class and cannot be used again in the model.
</div>

<h3>Socket Priority</h3>
The socket priority is only available if the target application runs on a linux operating system. On windows machines, this
value has no effect.
This value must be in range [0,6] and sets the protocol-defined priority for all packets to be sent on this socket.
Linux uses this value to order the networking queues: packets with a higher priority may be processed first depending on the selected device queueing discipline.
If different socket priorities are specified for the same socket (same port), then the largest value is selected.

<h3>Allow Broadcast</h3>
If broadcast is not allowed, then sending to a broadcast destination will result in an error (the result output will be negative).
To allow broadcast messages to be sent you must explicitly enable it via the checkbox of the blockmask.
Keep in mind that all parameters according to a socket must be unique, that is, if your model contains several UDP Send blocks related to the same internal socket (same port), all parameters must be identical.
Otherwise the generic target application will report and error and is not going to start.
