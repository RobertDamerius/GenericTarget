    <center><object width="25%" data="../img/gt.svg" type="image/svg+xml"></object></center>
    <br>

<h1>Generic Target</h1>
    The <b>Generic Target Toolbox</b> can be used to run MATLAB/Simulink models on a target computer in realtime.
    The common Simulink realtime libraries that are available can only be used in combination with a specific hardware to realize realtime applications.
    Thus, the implementation of an application is often limited to certain hardware.
    Although the supported hardware often has serial interfaces and/or digital inputs and outputs, AD/DA converters, CAN bus, etc., it may be limited from a computing power point of view.
    Often only network interfaces are used anyway.
    For applications where network interfaces alone are sufficient, the Generic Target Toolbox can be used to realize hardware-independent realtime applications with MATLAB/Simulink.
    In principle, any computer can be used as target computer as long as a Linux operating system is used with the PREEMPT_RT patch.
    Using a Linux operating system also has the advantage that additional software libraries can be easily integrated.
    The toolbox includes the following components:
    <br>
    <br>
    <table style="border:none;">
        <tr><td style="border:none;"><img src="../img/MATLABPackage.svg"></td><td width="10px" style="border:none;"></td><td valign="top" style="border:none;">
            <h4>MATLAB Package</h4>
            The MATLAB package (<b>GT</b>) includes the <a href="packages_gt_generictarget.html">GT.GenericTarget</a> class.
            This class is used to generate source code for the generic target application based on a Simulink model and deploy it to the target.
            In addition, this class is also used to start and stop the application or download recorded data.
            Furthermore, the (<b>GT</b>) MATLAB package contains functions to read recorded data.
            </td><tr>
        <tr><td style="border:none;"><img src="../img/SimulinkLibrary.svg"></td><td style="border:none;"></td><td valign="top" style="border:none;">
            <h4>Simulink Library</h4>
            The Simulink library contains driver blocks that are used to develop a target application.
            These blocks generally have no effect in a simulation and serve as code placeholders for the target application.
            However, a <a href="installtoolbox.html#simulinksupport">Simulink support</a> is implemented which allows many of the blocks to be used in the simulation (some with limitations).
            </td><tr>
        <tr><td style="border:none;"><img src="../img/TemplateModel.svg"></td><td style="border:none;"></td><td valign="top" style="border:none;">
            <h4>Template Model</h4>
            A Simulink template model is generated using the MATLAB package.
            Based on this model, the software for the generic target application can be developed.
            This template is pre-configured with all necessary settings, which are required for automatic code deployment.
            </td><tr>
        <tr><td style="border:none;"><img src="../img/GenericTargetCore.svg"></td><td style="border:none;"></td><td valign="top" style="border:none;">
            <h4>Generic Target Core</h4>
            The toolbox contains build tools and the source code for the core of the realtime application to be deployed to the target computer.
            The source code of the Generic Target Core is compiled on the target computer together with the generated code of the Simulink model.
            </td><tr>
    </table>
    <br>

<h2>How It Works</h2>
    A Simulink model should be created based on the Simulink template model.
    In principle, all standard blocks from which generic C/C++ code is generated can be used.
    Special interface blocks such as UDP Receive or Target Scope from the Simulink Realtime Toolbox cannot be used.
    A separate Simulink library with driver blocks comes with the Generic Target Toolbox.
    You can use the MATLAB class <a href="packages_gt_generictarget.html">GT.GenericTarget</a> to deploy the Simulink model to the target computer.
    During deployment generic C/C++ code is generated from the Simulink model.
    The generated code essentially contains a class with the methods <code>initialize()</code>, <code>step()</code>, and <code>terminate()</code>.
    Besides the generated code, the <code>codeInfo.mat</code> file is generated, which contains additional information like sample rates, thread priorities, function names and so on.
    Based on this information, the source code for a Simulink interface class is generated.
    The programming interface from the Generic Target Core to this Simulink interface class is always the same.
    The necessary additional information (e.g. thread priorities) from the code generation is also integrated into the Simulink interface class.
    <br>
    <br>
    <center><object width="95%" data="../img/Overview.svg" type="image/svg+xml"></object></center>
    <br>
    The generated model code as well as the source code for the Generic Target Core are transfered to the target computer via SCP during deployment.
    All sources are then compiled on the target computer.
    Therefore commands are send to the target via SSH.
    The Generic Target Core is responsible for calling the functions of the generated model code.
    When running the generic target application, the <code>initialize()</code> method is executed once at the beginning.
    Afterwards the <code>step()</code> method is executed with the appropriate sampling rate.
    When the application is terminated, the <code>terminate()</code> method is called.
    If several different sampling rates exist in the model, several <code>step()</code> methods are generated.
    These are called <code>step0()</code>, <code>step1()</code>, <code>step2()</code>, and so on.
    All those <code>step()</code> methods are then executed in parallel in separate threads with corresponding priorities.
    The lower the sample rate, the higher the priority.


<h2>Notes For Software Development</h2>
    When developing a target software using a Simulink model, some points must be considered to avoid complications in combination with the Generic Target Toolbox.
    Some points seem trivial, others do not seem immediately obvious and can cause problems during code generation and/or compilation on the target.
    Therefore, the following points should be considered for the development of a target application.
    <br>
    <h3>Use the Simulink template model</h3>
    The MATLAB command <a href="packages_gt_gettemplate.html">GT.GetTemplate</a> generates a Simulink model into the current working directory.
    In this template, all necessary settings are set so that the code generation generates the code in such a way that it can subsequently be used correctly in the automated deployment process.
    If settings are changed that affect code generation, the entire deployment process may stop working.
    Different sample rates are processed in parallel on the target PC in different threads.
    Therefore, the option Allow tasks to execute concurrently on target must be activated in the Simulink settings, for example (Fixed-step solver).
    <br>
    <h3>Rate-transition block</h3>
    Different samplerates in the model are connected by rate transition blocks.
    On the target computer the threads are executed in concurrence to each other.
    To ensure data integrity, the option <b>Ensure data integrity during data transfer</b> must be enabled in the rate-transition block mask.
    <br>
    <h3>Fixed application port</h3>
    When the Generic Target application is started, a defined UDP port is bound.
    This port has several functions.
    The application can be terminated with a certain message from the localhost.
    At the same time, an already assigned port means that an application with this port is already running (this can be any application).
    This helps to avoid running the same application multiple times.
    The port itself can be set before code generation using the <a href="packages_gt_generictarget.html#portAppSocket">portAppSocket</a> attribute in the MATLAB class <a href="packages_gt_generictarget.html">GT.GenericTarget</a>.
    Within the Simulink model, the port should no longer be used as a local port, as it would never be successfully bound.
    <br>
    <h3>Multiple applications</h3>
    If several applications are to run on the same target computer, the application port must be different for each application.
    At the same time, a different software directory must be used, otherwise the software directory of one application will be overwritten when another application is used.
    Both parameters can be set with the <a href="packages_gt_generictarget.html#portAppSocket">portAppSocket</a> and <code>targetSoftwareDirectory</code> attributes in the <a href="packages_gt_generictarget.html">GT.GenericTarget</a> MATLAB class.
    <br>
    <h3>Avoid keyword "main"</h3>
    During the deployment process, all code generation files are checked for the <code>int_T main(</code> and <code>int main(</code> expressions.
    Files that contain these expressions are removed.
    This is necessary because the generic target framework has its own main entry function.
    Since it is not distinguished whether the expressions are in a comment, there is thus the danger that also unintentionally files are removed, which contain these expressions e.g. only in comments or strings.
    Therefore, avoid the use of the keywork main when developing a software.
    <br>
    <h3>Avoid keyword "DEBUG"</h3>
    If the application is built in DEBUG mode, the C macro <code>DEBUG</code> is set.
    Therefore, no names should be selected that lead to function or variable names with <code>DEBUG</code> in the code generation.
    <br>
    <h3>Avoid console outputs</h3>
    The console output of the target application is redirected to a text file by default at startup.
    Therefore, many console outputs can result in a large text file.
    Also, the output can come from multiple threads at the same time, so multiple console outputs get mixed up.
    <br>
    <h3>Legacy Code Tool and custom code: use globally unique file names</h3>
    The legacy code tool can be used to generate a Simulink block directly from a given C/C++ code.
    Most of the blocks in the Generic Target library have been generated using the legacy code tool.
    When generating code for a Simulink model, all code files belonging to blocks generated with the Legacy Code Tool are copied into a single directory.
    If the same file names are used, this will result in the corresponding files being overwritten multiple times.
    Therefore, unique file names should be used.
    The function names within the code files must also not be ambiguous.
    Appropriate naming is recommended.
    The same applies to additional source files that are added as custom code.
    All C functions of blocks from the toolbox start with the prefix <code>GT_</code>.

