<h1>UDP Receive</h1>
<h3>Library</h3>
<span style="font-family: Courier New">GenericTarget / Interface / UDP Receive</span>

<h3>Description</h3>
Receive a UDP message at the specified port. By default all messages from the network buffer of the operating system are fetched. However, this option can be disabled in the advanced tab.
Internally, the target application uses a separate socket for each defined UDP port.
If the same local port is set in a UDP Send and Receive block, both blocks access the same socket in the background.
For this reason, the settings in the masks of the corresponding UDP Send and Receive blocks must be identical, otherwise the initialization phase of the target application will fail.
Values less than 1 can also be selected for the port in the block mask.
In this case, the actual UDP port is selected randomly by the operating system.
Nevertheless, all UDP Send and Receive blocks with the same value in the local port must have the identical mask settings.
If, for example, several UDP blocks have the local port -3, one common socket is used in the background whose current UDP port is randomly assigned by the operating system.

<h2>Input Ports</h2>
<h3>groupsToJoin</h3>
Optional input that is enabled if the multicast group source is set to external in the multicast tab. The signal must be an N-by-4 matrix that represent N multicast group addresses to be joined. If an address is not in the valid multicast group address range, then it's ignored.
<br>
<b>Data Type:</b> <span style="font-family: Courier New">uint8</span>


<h2>Output Ports</h2>
<h3>bytes</h3>
N-dimensional vector containing the latest message that has been fetched from the network buffer, where N indicates the receive buffer size.
<br>
<b>Data Type:</b> <span style="font-family: Courier New">uint8</span>

<h3>length</h3>
The actual length of the corresponding message.
<br>
<b>Data Type:</b> <span style="font-family: Courier New">uint32</span>

<h3>details</h3>
This output port is enabled, when checking the option <b>Show details output port</b> via the block mask.
<br>
<b>Data Type:</b> <span style="font-family: Courier New">Bus</span>
<br><br>
The bus contains the following values.
<br>
<table>
    <tr><th>Parameter Name</th><th>Data Type</th><th>Description</th></tr>
    <tr><td style="font-family: Courier New;">sourceAddress</td><td style="font-family: Courier New;">uint8</td><td>A 4-dimensional vector denoting the IPv4 source address of the received message.</td></tr>
    <tr><td style="font-family: Courier New;">sourcePort</td><td style="font-family: Courier New;">uint16</td><td>The source port of the received message.</td></tr>
    <tr><td style="font-family: Courier New;">result</td><td style="font-family: Courier New;">int32</td><td>The number of bytes that have been received or a negative value in case of errors.</td></tr>
    <tr><td style="font-family: Courier New;">lastErrorCode</td><td style="font-family: Courier New;">int32</td><td>The last socket error code from receiving a message. 0 means no error. The actual meaning of non-zero values depend on the operating system.</td></tr>
</table>


<h2>Block Parameters</h2>
The following table shows all block parameters.
<table>
    <tr><th>Parameter Name</th><th>Description</th></tr>
    <tr><td style="font-family: Courier New;">showDetails</td><td>Checkbox for showing the details output port.</td></tr>
    <tr><td style="font-family: Courier New;">localPort</td><td>Local port under the "Socket" tab.</td></tr>
    <tr><td style="font-family: Courier New;">deviceName</td><td>Device name under the "Socket" tab.</td></tr>
    <tr><td style="font-family: Courier New;">rxBufferSize</td><td>Receive buffer size under the "Socket" tab.</td></tr>
    <tr><td style="font-family: Courier New;">multicastGroupSource</td><td>Popup parameter under the "Multicast" tab for selecting the source of multicast groups to be joined.</td></tr>
    <tr><td style="font-family: Courier New;">multicastGroup</td><td>Multicast group field under the "Multicast" tab.</td></tr>
    <tr><td style="font-family: Courier New;">multicastTTL</td><td>Time-to-live value for outgoing multicast traffic under the "Multicast" tab.</td></tr>
    <tr><td style="font-family: Courier New;">multicastInterfaceAddress</td><td>IP address of the interface to be used for multicast traffic under the "Multicast" tab.</td></tr>
    <tr><td style="font-family: Courier New;">multicastAll</td><td>Checkbox for enabling the <code>IP_MULTICAST_ALL</code> socket option under the "Multicast" tab.</td></tr>
    <tr><td style="font-family: Courier New;">multicastLoop</td><td>Checkbox for enabling the <code>IP_MULTICAST_LOOP</code> socket option under the "Multicast" tab.</td></tr>
    <tr><td style="font-family: Courier New;">socketPriority</td><td>Socket priority under the "Advanced" tab.</td></tr>
    <tr><td style="font-family: Courier New;">allowBroadcast</td><td>Allow broadcast checkbox under the "Advanced" tab.</td></tr>
    <tr><td style="font-family: Courier New;">allowZeroLengthMessage</td><td>Allow sending zero-length message checkbox under the "Advanced" tab.</td></tr>
    <tr><td style="font-family: Courier New;">fetchAll</td><td>Fetch all messages checkbox under the "Advanced" tab.</td></tr>
    <tr><td style="font-family: Courier New;">SampleTime</td><td>Sampletime.</td></tr>
</table>

<h3>Socket</h3>
A socket represents the programming interface from the application to the network hardware.
During the initialization phase of the model, all UDP sockets are created and all socket options are set.
However, the binding of the local port as well as the binding to a specific network device is carried out during a step function of a model, as a network interface might not be available during model startup.
The socket options <code>SO_REUSEPORT</code> and <code>SO_REUSEADDR</code> are set after the socket creation, such that multiple sockets (e.g. multiple blocks) can bind to the same port and device.

<div class="note-green">
<h3 class="note-green">Note</h3>
It's possible to use multiple UDP Receive blocks with the same local port in your model.
</div>

<h3>Port Range</h3>
The port range [1,1023] is reserved for system ports and should not be used.
The range [1024,49151] is defined for user ports.
The remaining range [49152,65536] is reserved for dynamic ports.
However, not all operating systems follow this standardization.
Under certain circumstances, ports in the dynamic ports range may not be able to be used explicitly because the operating system prevents this.
If a port cannot be bound, then this port is either in use by another program or the operating system prevents its use.
If you set the local port to a value less than 1 via the block mask, then the generic target tells the operating system to select a random local port for you, which is usually in the range of dynamic ports.

<div class="note-orange">
<h3 class="note-orange">Application Port</h3>
Keep in mind that the target application uses its own port (<a href="packages_gt_generictarget.html#portAppSocket">portAppSocket</a>) to prevent the target from being started multiple times.
This port is set via the <a href="packages_gt_generictarget.html">GT.GenericTarget</a> class and cannot be used again in the model.
</div>

<h3>Socket Priority</h3>
The socket priority is only available if the target application runs on a linux operating system. On windows machines, this
value has no effect.
This value must be in range [0,6] and sets the protocol-defined priority for all packets to be sent on this socket.
Linux uses this value to order the networking queues: packets with a higher priority may be processed first depending on the selected device queueing discipline.

<h3>Buffering</h3>
The execution of a UDP receive block fetches a message from the operating systems receive buffer of the network device.
The maximum size of a message that can be fetched with the UDP Receive block is set via the <code>rxBufferSize</code> parameter in the block mask.
By default this block fetches all messages from the buffer and outputs the latest fetched message if any.
However, if you want to fetch messages from the operating systems receive buffer one by one, then disable the <code>fetchAll</code> checkbox in the block mask.

