<h1>Prepare Target Computer</h1>
    Before using the Generic Target Toolbox, the target computer must be set up with a <b>Linux-based operating system</b>.
    While any Linux distribution can be used, setup steps may vary depending on the chosen distribution.
    As a result, detailed installation instructions are not provided here - some required packages may already be installed, while others may need to be added manually.
    Next, <b>SSH key authentication</b> must be configured to allow passwordless login from the host computer to the target.
    The following steps outline this process.
    <br>
    <ul>
        <li><a href="#step1">Step 1: Install Linux OS</a></li>
        <li><a href="#step2">Step 2: Configure Linux</a></li>
        <li><a href="#step3">Step 3: Generate SSH Key for Autologin</a></li>
        <li><a href="#step4">Step 4: Optional Hardware Tuning and Advanced Options</a></li>
    </ul>


<a name="step1"></a>
<h2>Step 1: Install Linux OS</h2>
    <p>It is recommended to use <b>Debian</b>, as it is widely maintained and allows for easy installation of the real-time patch with a single command. However, any other Linux distribution can also be used.</p>
    <p>To set up the target computer:</p>
    <ol>
        <li><b>Download</b> a Linux distribution of your choice.</li>
        <li><b>Create a bootable USB stick</b> and boot from it.</li>
        <li><b>Follow the installation instructions</b>, selecting the minimal installation option if available (excluding office applications and games).</li>
        <li><b>Enable the SSH server</b> during installation if the option is provided.</li>
    </ol>
    <p>A desktop environment is <b>not required</b> for the Generic Target Toolbox. Whether to install a graphical user interface on the target computer is up to the user.</p>


<a name="step2"></a>
<h2>Step 2: Configure Linux</h2>
    At the beginning you can adjust basic settings.
    For example, the energy saving setting should be adjusted so that the computer does not automatically switch to standby mode.
    If your linux distribution does not come with <code>sudo</code>, then you have to install it. <code>sudo</code> is required to run
    application with administrator privileges.

        <h3>Install and configure sudo</h3>
        To install sudo, open a terminal and run
        <pre>su -l</pre>
        <pre>apt install sudo</pre>
        <pre>adduser UserName sudo</pre>
        where <code>UserName</code> is the user name of the computer.
        Afterwards reboot the system.
        <div class="note-orange">
        <h3 class="note-orange">Note</h3>
        If sudo is installed but the user is not in the sudoers file, then go into root mode and add the user via
        <pre>su -l</pre>
        <pre>adduser UserName sudo</pre>
        where <code>UserName</code> is the user name of the computer.
        Afterwards reboot the system.
        </div>
        In order to execute sudo commands via SSH without password request, edit the sudoers file for example with the nano editor by running
        <pre>sudo nano /etc/sudoers</pre>
        The line starting with "%sudo" must look like this
        <pre>%sudo   ALL=(ALL:ALL) NOPASSWD: ALL</pre>
        Save and close the file.

        <h3>Update path</h3>
        On some distributions like Debian, some command line executables are not in the path by default.
        Add those folders to the path variable by
        <pre>export PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin</pre>
        and reboot the system.

        <h3>Update system</h3>
        Connect the target to the internet and update the package database.
        <pre>sudo apt update</pre>
        If there're updates available, run
        <pre>sudo apt upgrade</pre>

        <h3>Install PREEMPT_RT patch</h3>
        The installation of the realtime kernel patch depends on the linux distribution used.
        Some distributions provide packages like <code>linux-image-realtime</code> or <code>linux-image-rt-amd64</code>.
        On debian for example, the realtime patch is installed by
        <pre>sudo apt install linux-image-rt-amd64</pre>
        After the new kernel has been installed, reboot the machine.
        To check if the realtime kernel is active, open a terminal and type <code>uname -a</code>.
        You should see something with "SMP PREEMPT_RT".

        <h3>Configure network buffers</h3>
        By default the network buffers for sending and receiving messages are limited to a fairly small value of about 100 KB or 200 KB depending on the distribution.
        To increase the maximum size of those buffers to 36 MB for each socket that is being created, run
        <pre>sudo sysctl -w net.core.rmem_max=33554432</pre>
        <pre>sudo sysctl -w net.core.wmem_max=33554432</pre>

        <h3>Install C++ Compiler + Tools</h3>
        Install the GNU compiler, build tools and C++ libraries with
        <pre>sudo apt install g++ make build-essential</pre>
        <div class="note-orange">
        <h3 class="note-orange">Note</h3>
        C++20 is required. Make sure that the installed g++ compiler supports the C++20 language features. You can check that by running <code>g++ -v -std=c++20</code>.
        If there's an error like <code>g++: error: unrecognized command line option '-std=c++20'</code>, then C++20 is not supported and you have to update the GNU compiler
        to the latest version.
        </div>

        <h3>Install SSH Server</h3>
        If the operating system does not come with an SSH server, install the OpenSSH server.
        <pre>sudo apt install openssh-server</pre>

        <h3>Install optional software</h3>
        Additional software can now be installed, e.g. tcpdump or wireshark.
        It is recommended to install network tools (for ping tests):
        <pre>sudo apt install net-tools</pre>


<a name="step3"></a>
<h2>Step 3: Generate SSH Key for Autologin</h2>
    <div class="note-orange">
    <h3 class="note-orange">Note</h3>
    On Linux this step is <b>recommended</b>. However, on Windows this step is <b>required</b> to allow ssh/scp commands to be executed from the
    MATLAB console.
    </div>

    When creating, starting, or stopping an application on the target computer using the <b>Generic Target Toolbox</b>, commands are executed via <b>SSH</b>.
    By default, SSH connections require continuous authorization and password confirmation.
    To simplify this process, <b>SSH keys</b> can be generated and exchanged once, allowing for passwordless authentication between the user PC and the target computer.
    These keys are stored in the <code>~/.ssh/</code> directory within the user's home folder.
    If needed, this folder can be deleted to remove all previously stored SSH connections.

    <p>The following commands should be executed on the <b>user PC</b> (client), which connects to an <b>SSH server</b> running on another computer, such as the target computer.</p>

    <div class="note-green">
    <h3 class="note-green">Linux</h3>
        The following description applies only to Linux host computers, since some commands are not available on Windows.
        <h3>1. Generate Key</h3>
        With the command
        <pre>ssh-keygen</pre>
        a key is generated. Then you can specify a file name in which the key should be stored.
        With <code>RETURN</code> a default file name is used. Then you can specify a passphrase from which the key will be generated.
        With <code>RETURN</code> an empty passphrase is used. You can use the same key for several target computers.
        Thus, when setting up more targets, you can start with step 2.

        <h3>2. Copy Public Key to Target</h3>
        To copy the generated key (public key) to a target computer use the command
        <pre>ssh-copy-id -i ~/.ssh/id_ed25519.pub UserName@RemoteServer</pre>
        Here <code>UserName</code> and <code>RemoteServer</code> must be replaced by the user name and IP address of the target computer, respectively.

        <h3>3. Add Private Key</h3>
        Now all that remains is to add a private key. To do this, execute the command
        <pre>ssh-add</pre>
        Establishing an SSH connection should now be done without asking for a password.
        For testing, make an SSH connection with the command <code>ssh UserName@RemoteServer</code>.
    </div>

    <div class="note-blue">
    <h3 class="note-blue">Windows</h3>
        <h3>1. Prepare</h3>
        Open PowerShell as an administrator and run
        <pre>Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0</pre>
        to install OpenSSH. Close the PowerShell. The remaining commands can be executed using a normal windows terminal.

        <h3>2. Generate Key</h3>
        With the command
        <pre>ssh-keygen</pre>
        a key is generated. Then you can specify a file name in which the key should be stored.
        With <code>RETURN</code> a default file name is used. Then you can specify a passphrase from which the key will be generated.
        With <code>RETURN</code> an empty passphrase is used. You can use the same key for several target computers.
        Thus, when setting up more targets, you can start with step 3.

        <h3>3. Copy Public Key to Target</h3>
        To copy the generated key (public key) to a target computer use the command
        <pre>scp C:\Users\HostName\.ssh\id_rsa.pub UserName@RemoteServer:</pre>
        where <code>HostName</code> is your host username and <code>UserName</code> and <code>RemoteServer</code> must be replaced by
        the user name and IP address of the target computer, respectively. Notice the <code>:</code> character at the end of the command.

        <h3>4. Configure Key</h3>
        Login to the target computer via SSH using
        <pre>ssh UserName@RemoteServer</pre>
        The following commands are all executed on the target computer.
        Next, make sure that the <code>.ssh</code> directory exists on the target. If not, you can create the directory with
        <pre>mkdir .ssh</pre>
        Append the uploaded public key to the authorized keys.
        <pre>cat id_rsa.pub >> .ssh/authorized_keys</pre>
        and delete the public key.
        <pre>rm id_rsa.pub</pre>
        The <code>.ssh</code> and <code>authorized_keys</code> directories must have the correct set of permissions.
        Execute the following commands
        <pre>chmod 700 ~/.ssh</pre>
        <pre>chmod 600 ~/.ssh/authorized_keys</pre>
        and run
        <pre>exit</pre>
        to logout. For testing, make an SSH connection from the host PC to the target computer with the command <code>ssh UserName@RemoteServer</code>.
    </div>


<a name="step4"></a>
<h2>Step 4: Optional Hardware Tuning and Advanced Options</h2>
    Now, some optional settings can be made to the BIOS and operating system to improve performance and achieve the lowest possible worst-case latency.
    Here are some pointers to help guide you:
    <p>In the BIOS, you may modify the following:</p>
    <ul>
        <li><b>Enable turbo boost</b> if your system supports it.</li>
        <li><b>Disable CPU "C states"</b> (CPU sleep states and CPU frequency scaling).</li>
        <li><b>Disable Hyper-Threading</b> to avoid virtual CPU cores.</li>
    </ul>

    <h3>Update GRUB Bootloader Menu</h3>
    The GRUB menu may be updated to reduce the bootloader timeout.
    On some operating systems, this timeout can be quite large (e.g., 10 seconds) to allow the user to read and select a boot option.
    To modify the bootloader menu, open it with the <b>nano</b> editor by running:
    <pre>sudo nano /etc/default/grub</pre>
    Once changes are made, update the bootloader with:
    <pre>sudo update-grub</pre>
    The actual boot options you can modify may depend on the GRUB version and the operating system.

    <h3>Isolating CPU Cores</h3>
    The target application can be pinned to specific CPU cores.
    Via the GRUB bootloader menu, CPU cores can be isolated using the <code>isolcpus</code> option, preventing them from being used by operating system processes.
    This allows you to restrict the operating system to certain cores and dedicate others to the target application.
    For example, on an 8-core CPU, you can leave cores 0 and 1 to the OS and isolate cores 2 to 7 by modifying the GRUB command line option as follows:
    <pre>GRUB_CMDLINE_LINUX_DEFAULT="isolcpus=2-7"</pre>
    If you make changes to the bootloader menu, don't forget to run <code>sudo update-grub</code> and then reboot the target.

<br><br><br><br>

